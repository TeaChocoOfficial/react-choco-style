import { Sizes } from "./Size";
import { ColorsType } from "./color";
export type ChocoStyleTypes = {
    [key in keyof ChocoStyleType]?: Sizes | BorderStyleType;
};
export type ChocoStylePropsTypes = {
    [key in keyof ChocoStylePropsType]?: Sizes | BorderStyleType;
};
export type BorderStyleType = {
    size?: number;
    width?: Sizes;
    color?: ColorsType;
    style?: "dotted" | "dashed" | "solid" | "double" | "groove" | "ridge" | "inset" | "outset" | "none" | "hidden";
};
export type GridTemplateType = [(string | number)[]] | [(string | number)[], (string | number)[]];
export type GridAreaType = number[][];
export type ChocoStyleDefType = {
    bg?: string;
    color?: ColorsType;
    bgColor?: ColorsType;
    bgImage?: string;
    op?: number;
    z?: number;
    w?: Sizes;
    h?: Sizes;
    minW?: Sizes;
    minH?: Sizes;
    maxW?: Sizes;
    maxH?: Sizes;
    i?: Sizes;
    t?: Sizes;
    b?: Sizes;
    l?: Sizes;
    r?: Sizes;
    x?: Sizes;
    y?: Sizes;
    p?: Sizes;
    pt?: Sizes;
    pb?: Sizes;
    pl?: Sizes;
    pr?: Sizes;
    px?: Sizes;
    py?: Sizes;
    m?: Sizes;
    mt?: Sizes;
    mb?: Sizes;
    ml?: Sizes;
    mr?: Sizes;
    mx?: Sizes;
    my?: Sizes;
    gap?: Sizes;
    gapT?: Sizes;
    gapB?: Sizes;
    gapL?: Sizes;
    gapR?: Sizes;
    gapX?: Sizes;
    gapY?: Sizes;
    size?: number;
    fontS?: Sizes;
    gridT?: Sizes<GridTemplateType>;
    gridA?: Sizes<GridAreaType>;
    borR?: Sizes;
    border?: BorderStyleType | string;
    animation?: number | string;
    transform?: React.CSSProperties["transform"];
    transformCenter?: "all" | "x" | "y";
};
export type ChocoStyleType = ChocoStyleDefType & {
    dp?: Sizes<null | "f" | "b" | "i" | "if" | "ib" | "g" | "ig" | "t" | "it">;
    fd?: Sizes<null | "r" | "rr" | "c" | "cr" | "i">;
    fw?: Sizes<boolean>;
    ac?: Sizes<null | "e" | "s" | "c" | "a" | "b" | "st">;
    a?: Sizes<null | "e" | "s" | "c" | "a" | "b" | "st">;
    j?: Sizes<null | "e" | "s" | "c" | "a" | "b" | "ev">;
    text?: Sizes<null | "e" | "l" | "s" | "r" | "c" | "j">;
    pos?: Sizes<null | "r" | "a" | "f" | "s">;
    of?: Sizes<null | "v" | "h" | "s" | "a">;
    cur?: Sizes<null | "d" | "p" | "m" | "n" | "w" | "t" | "c" | "cr">;
};
export type ChocoStylePropsType = ChocoStyleDefType & {
    cs?: ChocoStyleType;
    full?: boolean;
    fullV?: boolean;
    dNone?: boolean;
    dFlex?: boolean;
    dBlock?: boolean;
    dInline?: boolean;
    dInlineF?: boolean;
    dInlineB?: boolean;
    dGrid?: boolean;
    dInlineG?: boolean;
    dTable?: boolean;
    dInlineT?: boolean;
    row?: boolean;
    rRow?: boolean;
    column?: boolean;
    rColumn?: boolean;
    fWrap?: boolean;
    acEnd?: boolean;
    acStart?: boolean;
    acCenter?: boolean;
    acAround?: boolean;
    acBetween?: boolean;
    acStretch?: boolean;
    aEnd?: boolean;
    aStart?: boolean;
    aCenter?: boolean;
    aAround?: boolean;
    aBetween?: boolean;
    aStretch?: boolean;
    jEnd?: boolean;
    jStart?: boolean;
    jCenter?: boolean;
    jEvenly?: boolean;
    jAround?: boolean;
    jBetween?: boolean;
    tEnd?: boolean;
    tLeft?: boolean;
    tStart?: boolean;
    tRight?: boolean;
    tCenter?: boolean;
    tJustify?: boolean;
    pos?: ChocoStyleType["pos"];
    posR?: boolean;
    posA?: boolean;
    posF?: boolean;
    posS?: boolean;
};
